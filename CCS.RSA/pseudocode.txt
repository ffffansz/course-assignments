产生两个大素数e和d，还有一个大素数n
(e, n)是公钥，d是私钥

C = P^e mod n
P = C^d mod n

密钥生成：
选出两个512 bit的大素数（大约是十进制的154位数）p和q，p != q
n = p * q (1024 位，约是十进制的309位数）
Euler(n) = (p - 1) * (q - 1)
找出一个e，满足1 < e < Euler(n)，且e和Euler(n)互素
d = e mod Euler(n)的逆

公钥：(e, n)
私钥: d


func RSA_Encry(P, e, n):
    return fast_exponentiation(P, e, n)   //快速幂运算计算P^e mod n

func RSA_Decry(C, d, n):
    return fast_exponentiation(C, d, n)   //快速幂运算计算C^d mod n


//要求P或C对应的二进制串对应的数值要小于n的数值，如果不满足，则需要对P或C进行分组，且加密和解密时的分组方式要相同
//p和q最小要求512 bit， n最小要求1024 bit

func genBigPrime(n)  //产生一个n bits的大素数
func genRandomBitNum(n)    //产生一个n bits的奇数随机数（要确保是奇数，最高位和最低位必须为1）
func primalityTest(n, m) //测试一个n是否为素数，使用Miller-Rabin+整除性检验，非素数通过测试的概率为(1/4)^m（即执行m次Miller-Rabin素性测试）
func fastExpWithMod(a, e, n)  //快速幂运算计算a^e mod n
func euler(n)  //计算Euluer(n)
func modInverse(a, n)  //计算a mod n的逆